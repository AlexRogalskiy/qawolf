"URLs where artifacts from a test run can be found"
type Artifacts {
  "Secure URL for a GIF of a test run"
  gifUrl: String

  "Secure URL for JSON video metadata from a test run"
  jsonUrl: String

  "Secure URL for the logs of a test run"
  logsUrl: String!

  "Secure URL for the video of a test run"
  videoUrl: String
}

"A grouper for a user with their access token"
type AuthenticatedUser {
  "An access token that can be used to authenticate future requests"
  access_token: String!

  "The user who is associated with this access token"
  user: User!
}

"A grouper for data used by the dashboard"
type Dashboard {
  "List of the most recent 50 suites in this trigger, from newest to oldest"
  suites: [Suite!]!

  "List of all tests in this trigger, ordered alphabetically by test name ascending."
  tests: [Test!]!

  "ID of the test trigger that this dashboard data is for"
  trigger_id: ID!
}

"A response from the deleteTrigger mutation"
type DeleteTrigger {
  "ID of the default trigger"
  default_trigger_id: ID!

  "ID of the deleted trigger"
  id: ID!
}

"Environment for a deployment"
enum DeploymentEnvironment {
  "Preview"
  preview

  "Production"
  production
}

"An environment for a team"
type Environment {
  "Environment ID"
  id: ID!

  "Environment name"
  name: String!

  "Team associated with this environment"
  team_id: ID!
}

"A single defined environment variable for an environment"
type EnvironmentVariable {
  "Date and time at which the environment variable record was created"
  created_at: String!

  "Environment associated with this environment variable"
  environment_id: ID!

  "Environment variable ID"
  id: ID!

  "Variable name, as it will be set on `process.env`"
  name: String!

  "Team associated with this environment variable"
  team_id: ID!

  "Variable value, stored encrypted in the database"
  value: String!
}

"A grouper for environment variable records and resolved environment variables with values"
type EnvironmentVariables {
  """
  A JSON object with key:value env variables, with decrypted values.
  """
  env: String!

  """
  All environment variable records for the environment.
  """
  variables: [EnvironmentVariable!]!
}

"Valid types for Integration.type"
enum IntegrationType {
  "GitHub (https://github.com/)"
  github
  "Slack (https://slack.com/)"
  slack
}

"Represents one integration with an external system such as Slack"
type Integration {
  "GitHub repo name"
  github_repo_name: String

  "Integration ID"
  id: ID!

  "Slack channel name"
  slack_channel: String

  "Slack team name"
  team_name: String

  "Integration type"
  type: IntegrationType!
}

"An invite sent to a user to join a QA Wolf team"
type Invite {
  "Email address invite was sent to"
  email: String!

  "Invite ID"
  id: ID!

  "ID of the team the user was invited to join"
  team_id: ID!

  "The name of the wolf assigned to this user"
  wolf_name: String!

  "The number of the wolf assigned to this user"
  wolf_number: Int!

  "The name of the wolf variant assigned to this user"
  wolf_variant: String!
}

"Status of a test run"
enum RunStatus {
  "Created (in progress)"
  created

  "Completed but failed"
  fail

  "Completed and passed"
  pass
}

"Current details and status for one run of a single test"
type Run {
  "The test code"
  code: String!

  "Date and time at which the run finished, if it is done"
  completed_at: String

  "Date and time at which the run was created"
  created_at: String!

  "If the run is in progress, which line of `code` it is currently executing"
  current_line: Int

  "Associated environment ID"
  environment_id: ID

  "Test run ID"
  id: ID!

  "URL for logs from the test run, if any"
  logs_url: String

  "Date and time at which the run started"
  started_at: String

  "Current status of the run"
  status: RunStatus!

  "Associated suite ID"
  suite_id: ID

  "Associated test ID (which test we are running)"
  test_id: ID!

  "URL for a video of the test run, if there's a video"
  video_url: String
}

"Connection information for a test runner"
type Runner {
  "The API key associated with the test runner"
  api_key: String

  "The WebSockets URL for connecting to the runner"
  ws_url: String
}

"Information needed by a test runner to run a single test"
type RunnerRun {
  "The secure URLs at which to store artifacts"
  artifacts: Artifacts!

  "Test code to run"
  code: String!

  """
  Environment variables as a JSON key:value object string. The runner
  makes these available on `process.env`.
  """
  env: String!

  "Team helper code, for sharing functionality between tests"
  helpers: String!

  "The RunnerRun ID"
  id: ID!

  "ID of the record for the running test"
  test_id: ID!

  "Test version, incremented as the test code changes"
  version: Int!
}

"A response from the sendLoginCode mutation"
type SendLoginCode {
  "Email address to which a login code was sent"
  email: String!
}

"All the test runs for one run of a test trigger"
type Suite {
  "Date and time at which the suite was created (trigger test run began)"
  created_at: String!

  "Associated test trigger environment ID"
  environment_id: ID

  "A JSON object with key:value env variables, with decrypted values."
  environment_variables: String

  "Suite ID"
  id: ID!

  "Associated test runs"
  runs: [SuiteRun!]!

  "ID of the team that owns the associated test trigger"
  team_id: ID!

  "Associated test trigger ID"
  trigger_id: ID!

  "Associated test trigger name"
  trigger_name: String!
}

"One run for one test that is part of a test trigger we are running all at once"
type SuiteRun {
  "Date and time at which the run finished, if it is done"
  completed_at: String

  "Secure URL to a GIF of the run"
  gif_url: String

  "Suite run ID"
  id: ID!

  "True if the test is deleted"
  is_test_deleted: Boolean!

  "Date and time at which the run started, if it has started"
  started_at: String

  "Current status of the run"
  status: RunStatus!

  "ID of the test we are running"
  test_id: ID!

  "Name of the test we are running"
  test_name: String!
}

"A team of users"
type Team {
  "The ID of a Slack integration associated with this team"
  alert_integration_id: ID

  "The API key for the team"
  api_key: String!

  "Team helper code, for sharing functionality between tests"
  helpers: String!

  "Team ID"
  id: ID!

  """
  True if all users on the associated team should be alerted by email whenever
  a test run finishes.
  """
  is_email_alert_enabled: Boolean!

  "True if the team is enabled"
  is_enabled: Boolean!

  """
  List of all invites to the team that are not yet
  expired or accepted, sorted by email ascending
  """
  invites: [Invite!]!

  "Team name, for display in UI"
  name: String!

  """
  The ID of the next trigger the team creates, used
  to copy API call example when creating a trigger
  """
  next_trigger_id: ID!

  "Current plan this team is on"
  plan: String!

  "Date and time at which this team's plan subscription was last renewed"
  renewed_at: String

  "All users who belong to this team, sorted by email ascending"
  users: [User!]!
}

"A browser test"
type Test {
  "The test code (JavaScript)"
  code: String!

  "Date and time at which this test was deleted, if it was"
  deleted_at: String

  "Test ID"
  id: ID!

  "True if the test is enabled"
  is_enabled: Boolean!

  "A name for the test, for display in UI"
  name: String!

  "Summary of most recent runs of this test"
  summary: TestSummary

  "Date and time at which this test was last updated"
  updated_at: String!

  "Test version, incremented as the test code changes"
  version: Int!
}

"Results for a test run"
type TestResult {
  "The test run"
  run: Run

  "The test"
  test: Test!
}

"Summary of most recent runs of a test"
type TestSummary {
  "URL for a GIF of the most recent test run"
  gif_url: String

  "The most recent 10 runs of this test, in descending order of when they started"
  last_runs: [SuiteRun!]!
}

"A list of trigger IDs for a test"
type TestTriggers {
  "The test ID"
  test_id: ID!

  "A list of associated trigger IDs"
  trigger_ids: [ID!]!
}

"A test trigger"
type Trigger {
  "The branches to run tests on for the GitHub integration (comma separated list)."
  deployment_branches: String

  "The deployment environment to run tests on for the GitHub integration."
  deployment_environment: DeploymentEnvironment

  "The ID of a deployment integration associated with this test trigger"
  deployment_integration_id: ID

  "The ID of an environment associated with this test trigger"
  environment_id: ID

  "Test trigger ID"
  id: String!

  "True if this is the default test trigger for the team that owns it"
  is_default: Boolean!

  "A name for the trigger, for users to identify it in the UI"
  name: String!

  "Date and time at which this test trigger is next scheduled to run"
  next_at: String

  "Number of minutes between test runs for the trigger"
  repeat_minutes: Int
}

"A registered QA Wolf user"
type User {
  "URL for an avatar image, suitable for use in an `img` element"
  avatar_url: String

  "Primary registered email address for login"
  email: String!

  "GitHub login name, if they have a linked GitHub account"
  github_login: String

  "User ID"
  id: ID!

  "Date and time at which this user was onboarded, if they were"
  onboarded_at: String

  "List of teams this user belongs to"
  teams: [Team!]!

  "The name of the wolf assigned to this user"
  wolf_name: String!

  "The number of the wolf assigned to this user"
  wolf_number: Int!

  "The name of the wolf variant assigned to this user"
  wolf_variant: String!
}

"A QA Wolf wolf character"
type Wolf {
  "Name, for display"
  name: String!

  "Wolf number"
  number: Int!

  "Wolf variant"
  variant: String!
}

"Mutations allow you to modify data"
type Mutation {
  """
  Accept an invite to join a team. This mutation requires authentication,
  so you would first create a user or sign in and then accept one or more
  invites.
  """
  acceptInvite(
    """
    Invite ID
    """
    id: ID!
  ): Invite!

  """
  Create an environment.

  Requires that you have access to the team.
  """
  createEnvironment(
    """
    Name of the new environment
    """
    name: String!

    """
    ID of the team that should own the environment
    """
    team_id: ID!
  ): Environment!

  """
  Create GitHub integrations. When the GitHub app is installed, this reconciles
  the integrations in the database with the repos that the GitHub app has access to.
  The response is the list of integrations created as a result of the specified
  GitHub app installation.

  Requires that you have access to the team.
  """
  createGitHubIntegrations(
    """
    The installation id of the GitHub app
    """
    installation_id: ID!

    """
    The GitHub repos accessible to the app installation will belong to this team.
    """
    team_id: ID!
  ): [Integration!]!

  """
  Create a new test trigger. The trigger is given an automatic
  unique name, which can then be changed using `updateTrigger`.

  Requires that you have access to the team.
  """
  createTrigger(
    """
    If specified, run tests only when these branches (comma separated list) are deployed.
    """
    deployment_branches: String

    """
    If specified, run tests only on this deployment environment.
    """
    deployment_environment: DeploymentEnvironment

    """
    The ID of the integration for the connected GitHub repository.
    """
    deployment_integration_id: ID

    "ID of the environment on the trigger"
    environment_id: ID

    "Name of the trigger"
    name: String!

    "Interval to run the trigger on"
    repeat_minutes: Int

    "ID of the team that should own the trigger"
    team_id: ID!

    "IDs of the tests to add the trigger to"
    test_ids: [ID!]
  ): Trigger!

  """
  Creates a new environment variable record for an environment.

  Requires that you have access to the team that owns the environment.
  """
  createEnvironmentVariable(
    "ID of the environment to associate this variable with"
    environment_id: ID!

    "Name (key) for the variable"
    name: String!

    "Value for the variable. This will be encrypted before being stored."
    value: String!
  ): EnvironmentVariable!

  """
  Invites one or more people to join a team by email. Emails are sent
  immediately, so this may take a little longer to respond.

  Requires that you have access to the team.
  """
  createInvites(
    """
    List of email addresses to invite
    """
    emails: [String!]!

    """
    Team ID
    """
    team_id: ID!
  ): [Invite!]!

  """
  Creates a GitHub sign-in URL. Because this is used to support
  signing in, no authentication is required.
  """
  createSignInUrl(
    """
    Relative app URL to redirect to after signing in
    """
    redirect_uri: String!
  ): String!

  """
  Creates a new Slack integration record, which links one test trigger
  with one Slack channel.

  Requires that you have access to the team that owns the trigger.
  """
  createSlackIntegration(
    """
    Relative app URL to redirect to after approving the integration
    """
    redirect_uri: String!

    """
    The code to send to Slack for the OAuth flow
    """
    slack_code: String!

    """
    Team ID
    """
    team_id: ID!
  ): Integration!

  """
  Creates and returns a URL that can be used to begin a Slack OAuth flow,
  which allows you to authorize a Slack integration.
  """
  createSlackIntegrationUrl(
    """
    Relative app URL to redirect to after the OAuth flow
    """
    redirect_uri: String!
  ): String!

  """
  Creates a new test suite for one or more tests from a single test trigger.
  Returns the ID of the created suite.

  Requires that you have access to the team that owns the trigger, and that
  the team's plan limit for test runs has not been reached.
  """
  createSuite(
    """
    List of test IDs to include in the suite. Only those that are
    enabled and not deleted will be included, and any that are not
    in the specified test trigger will be ignored.
    """
    test_ids: [ID!]

    """
    Trigger ID
    """
    trigger_id: ID!
  ): String!

  """
  Creates a new test. The URL is used as the first page the browser
  will visit in the test, but this can be changed later.

  Requires that you are logged in and a member of at least one team.
  """
  createTest(
    """
    ID of test trigger to put the test in. If not provided, it will be
    put in the default test trigger for the authenticated user's team.
    If the user is on multiple teams and you don't specify a trigger ID,
    creation will fail.
    """
    trigger_id: ID

    """
    The URL to navigate to first in the test browser (the URL
    of the page you want to test)
    """
    url: String!
  ): Test!

  """
  Deletes an environment record by ID and all its associated
  environment variables.

  Requires that you have access to the team that owns the environment.
  """
  deleteEnvironment("Environment ID" id: ID!): Environment!

  """
  Deletes an environment variable record by ID.

  Requires that you have access to the team that owns the environment
  that is associated with the variable.
  """
  deleteEnvironmentVariable(
    "Environment variable ID"
    id: ID!
  ): EnvironmentVariable!

  """
  Soft deletes a test trigger record by ID. You cannot delete the
  default test trigger for a team. All tests are removed from a
  trigger when it is soft deleted, but the tests themselves are
  not deleted an remain in any other triggers as well as the default
  trigger.

  Requires that you have access to the team that owns the test trigger
  """
  deleteTrigger(
    """
    Test trigger ID
    """
    id: ID!
  ): DeleteTrigger!

  """
  Soft deletes one or more tests by ID. Tests are removed from
  all triggers when they are soft deleted.

  Requires that you have access to the team that owns each test.
  """
  deleteTests(
    """
    Array of test IDs to delete
    """
    ids: [ID!]!
  ): [Test!]!

  """
  Join the QA Wolf email list.
  """
  joinMailingList(
    """
    Email address
    """
    email: String
  ): Boolean!

  """
  A multi-purpose mutation that always ends with sending a magic logic code
  to an email address, which can then be used as a parameter value for the
  `signInWithEmail` mutation.

  Because this is used to support signing in, no authentication is required.
  """
  sendLoginCode(
    """
    The email address for the user who wants to sign in (i.e., obtain an
    authentication token for API requests). If this is not the email address
    assocated with an existing user account, then a new user account with
    this address will be created before the login code is sent.
    """
    email: String!

    """
    If `email` is not associated with an existing user account (if this is a
    sign up), you may optionally provide an invite ID, which will prevent a
    new default team from being created for the new user account. This does
    not accept the invite. You must call the `acceptInvite` mutation after
    you obtain an access token to accept the invite.
    """
    invite_id: ID
  ): SendLoginCode!

  """
  Completes a login request, returning a valid access token. This is
  the second step of email login after the `sendLoginCode` mutation.

  Because this is used to support signing in, no authentication is required.
  """
  signInWithEmail(
    """
    The email address for the user who wants to sign in (i.e., obtain an
    authentication token for API requests). Use the same email that was
    passed to the `sendLoginCode` mutation.
    """
    email: String!

    """
    The login code that was sent by email to the email address. If this
    code is expired, a new code will be sent immediately, and you can
    then call this mutation again with the new code.
    """
    login_code: String!
  ): AuthenticatedUser!

  """
  After going through the GitHub OAuth flow, use this mutation to obtain
  a valid access token.

  Because this is used to support signing in, no authentication is required.
  """
  signInWithGitHub(
    """
    Code received from GitHub OAuth flow
    """
    github_code: String!

    """
    State value received from GitHub OAuth flow
    """
    github_state: String!

    """
    If accepting an invitation to join a team, provide the invite ID. This
    will prevent a new default team from being created if this is a new
    user account. This does not accept the invite. You must call the
    `acceptInvite` mutation after you obtain an access token to accept
    the invite.
    """
    invite_id: ID
  ): AuthenticatedUser!

  """
  Updates an environment by ID.

  Requires that you have access to the team that owns the environment.
  """
  updateEnvironment(
    "Environment ID"
    id: ID!

    "Updated environment name"
    name: String!
  ): Environment!

  """
  Updates an environment variable by ID.

  Requires that you have access to the team that owns the environment.
  """
  updateEnvironmentVariable(
    "Environment variable ID"
    id: ID!

    "Updated environment variable name"
    name: String!

    "Updated environment variable value"
    value: String!
  ): EnvironmentVariable!

  """
  Updates a test trigger by ID.

  Requires that you have access to the team that owns the trigger.
  """
  updateTrigger(
    """
    Updated value for this field. If this field is omitted, it will
    not be changed. If it is `null`, it will be cleared.
    """
    deployment_branches: String

    """
    Updated value for this field. If this field is omitted, it will
    not be changed. If it is `null`, it will be cleared.
    """
    deployment_environment: DeploymentEnvironment

    """
    Updated deployment integration ID. If this field is omitted, it will not be
    changed. If it is `null`, it will be cleared.
    """
    deployment_integration_id: ID

    """
    Updated environment ID. If this field is omitted, it will not be changed.
    If it is `null`, it will be cleared.
    """
    environment_id: ID

    "Test trigger ID"
    id: ID!

    """
    Updated trigger name. If this field is omitted, it will
    not be changed. If it is `null`, it will be cleared. If
    `trigger.is_default` is `true`, an error will occur. The
    default trigger cannot be renamed.
    """
    name: String

    """
    Updated time in minutes between test runs for the trigger.
    If this field is omitted, it will not be changed. If it
    is `null`, it will be cleared. Whenever you change this
    value, the next upcoming run is also immediately rescheduled.
    """
    repeat_minutes: Int
  ): Trigger!

  """
  Adds one or more tests to a trigger. Returns the updated
  test_trigger relationships.

  Requires that you have access to the team that owns the trigger.
  """
  updateTestTriggers(
    """
    ID of test trigger to add all the tests to. If this field is set,
    `remove_trigger_id` may not be set.
    """
    add_trigger_id: ID

    """
    ID of test trigger to remove all the tests from. If this field is set,
    `add_trigger_id` may not be set.
    """
    remove_trigger_id: ID

    """
    List of test IDs to add to / remove from the test trigger.
    """
    test_ids: [ID!]
  ): [TestTriggers!]!

  """
  Updates information about a test run by run ID. A runner service calls
  this to provide status updates.

  An API key is needed to call this mutation.
  """
  updateRun(
    """
    Which line of code is currently being executed by the runner.
    If not provided, defaults to `1`.
    """
    current_line: Int

    """
    The ID of the run to update
    """
    id: ID!

    """
    The current status of the run
    """
    status: RunStatus!
  ): Run!

  """
  Updates information about a test runner by runner ID. A
  runner service calls this to provide status updates.

  You are expected to provide either `is_healthy` or `is_ready`
  but not both. If both are provided, only `is_ready` is
  used. If neither are provided, there will be an error.

  If the runner has no suite run currently associated with it,
  this will return `null`.

  An API key is needed to call this mutation.
  """
  updateRunner(
    """
    The ID of the runner to update
    """
    id: ID!

    """
    Whether the runner is currently in a healthy state
    """
    is_healthy: Boolean

    """
    Whether the runner is currently in a ready state
    """
    is_ready: Boolean
  ): RunnerRun

  """
  Updates a team by ID.

  Requires that you have access to the team.
  """
  updateTeam(
    """
    Updated alert integration ID. If this field is omitted, it will not be
    changed. If it is `null`, it will be cleared.
    """
    alert_integration_id: String

    """
    Updated helpers for the team
    """
    helpers: String

    """
    Team ID
    """
    id: ID!

    """
    Whether the team members receive email alerts for tests
    """
    is_email_alert_enabled: Boolean

    """
    New name for the team
    """
    name: String
  ): Team!

  """
  Updates a test by ID.

  Requires that you have access to the team that owns the test.
  """
  updateTest(
    """
    Updated test code (JavaScript that runs). If omitted or `null`,
    the code will not be updated. Pass an empty string to clear the
    code.
    """
    code: String

    """
    ID of test to update
    """
    id: ID!

    """
    Whether the test is enabled. If omitted or `null`,
    the field will not be updated.
    """
    is_enabled: Boolean

    """
    Updated test name. If omitted or `null` or an empty string,
    the name will not be updated.
    """
    name: String

    """
    Updated code version number. If omitted or `null`,
    the version will not be updated. If this is provided and is
    not higher than the current version, the update will fail.
    This is done to prevent out-of-order updates from being
    accepted.
    """
    version: Int
  ): Test!

  """
  Update the currently authenticated user record.

  Requires that you are signed in (provide a valid access token)
  """
  updateUser(
    """
    Set the date and time at which the user finished the onboarding flow
    """
    onboarded_at: String!
  ): User!
}

"Queries allow you to retrieve but not modify data"
type Query {
  """
  Returns the user associated with the request authentication token, or null if not logged in
  """
  currentUser: User

  """
  Returns dashboard data (tests and suites) for a single test trigger.

  One of the teams you are on must have access to the test trigger.
  """
  dashboard("The trigger ID" trigger_id: ID!): Dashboard!

  """
  Returns environments by team ID.

  You must be on the team to list environments.
  """
  environments("The team ID" team_id: ID!): [Environment!]!

  """
  Returns environment variables for a single environment by environment ID.

  One of the teams you are on must have access to the environment.
  """
  environmentVariables(
    "The environment ID"
    environment_id: ID!
  ): EnvironmentVariables!

  """
  Returns the runner for the run or test.
  """
  runner(
    """
    Run ID
    """
    run_id: ID

    """
    Request a runner for the test
    """
    should_request_runner: Boolean

    """
    Test ID
    """
    test_id: ID
  ): Runner

  """
  Returns all test triggers for a single team by team ID. The default trigger is
  always first, followed by other triggers ordered by name ascending.

  Requires that you have access to the team.
  """
  triggers("The team ID" team_id: ID!): [Trigger!]!

  """
  Returns all integrations for a single team by team ID.

  Requires that you have access to the team.
  """
  integrations("The team ID" team_id: ID!): [Integration!]!

  """
  Returns the last 8 runs for a test by ID.

  Requires that one of the teams you are on own the test.
  """
  testHistory("The test ID" id: ID!): [Run!]!

  """
  Returns a single test suite by ID.

  Requires that one of the teams you are on owns the test suite.
  """
  suite("The suite ID" id: ID!): Suite!

  """
  Returns a single team by ID.

  Requires that you are on the team.
  """
  team("The team ID" id: ID!): Team!

  """
  Returns a test result by test ID or run ID. If 'run_id' is provided,
  then 'TestResult.run' will be set. Otherwise it will be null.

  Requires that one of the teams you are on owns the test.
  """
  test(
    "The test ID"
    id: ID

    "The test run ID"
    run_id: ID
  ): TestResult!

  """
  Returns a test trigger for each test ID.

  Requires that one of the teams you are on owns the tests.
  """
  testTriggers("The test IDs" test_ids: [ID!]!): [TestTriggers!]!
}
